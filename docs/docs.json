{"meta":{"generator":"0.8.0","format":19,"date":1550726331856},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://discord.js.org\"><img src=\"/static/logo.svg\" width=\"546\" alt=\"discord.js\" id=\"djs-logo\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://discord.gg/bRCvFy9\"><img src=\"https://discordapp.com/api/guilds/222078108977594368/embed.png\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/v/discord.js.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/dt/discord.js.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://travis-ci.org/discordjs/discord.js\"><img src=\"https://travis-ci.org/discordjs/discord.js.svg\" alt=\"Build status\" /></a>\n    <a href=\"https://david-dm.org/discordjs/discord.js\"><img src=\"https://img.shields.io/david/discordjs/discord.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <a href=\"https://www.patreon.com/discordjs\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/discord.js/\"><img src=\"https://nodei.co/npm/discord.js.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# Welcome!\nWelcome to the discord.js v12 documentation.\n\nv12 is still very much a work-in-progress, as we're aiming to make it the best it can possibly be before releasing.\nOnly use it if you are fond of living life on the bleeding edge.\n\n## About\ndiscord.js is a powerful [Node.js](https://nodejs.org) module that allows you to interact with the\n[Discord API](https://discordapp.com/developers/docs/intro) very easily.\n\n- Object-oriented\n- Predictable abstractions\n- Performant\n- 100% coverage of the Discord API\n\n## Installation\n**Node.js 8.0.0 or newer is required.**  \nIgnore any warnings about unmet peer dependencies, as they're all optional.\n\nWithout voice support: `npm install discord.js`  \nWith voice support ([node-opus](https://www.npmjs.com/package/node-opus)): `npm install discord.js node-opus`  \nWith voice support ([opusscript](https://www.npmjs.com/package/opusscript)): `npm install discord.js opusscript`\n\n### Audio engines\nThe preferred audio engine is node-opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose node-opus.\nUsing opusscript is only recommended for development environments where node-opus is tough to get working.\nFor production bots, using node-opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n### Optional packages\n- [zlib-sync](https://www.npmjs.com/package/zlib-sync) for significantly faster WebSocket data inflation (`npm install zlib-sync`)\n- [erlpack](https://github.com/discordapp/erlpack) for significantly faster WebSocket data (de)serialisation (`npm install discordapp/erlpack`)\n- One of the following packages can be installed for faster voice packet encryption and decryption:\n    - [sodium](https://www.npmjs.com/package/sodium) (`npm install sodium`)\n    - [libsodium.js](https://www.npmjs.com/package/libsodium-wrappers) (`npm install libsodium-wrappers`)\n- [uws](https://www.npmjs.com/package/@discordjs/uws) for a much faster WebSocket connection (`npm install @discordjs/uws`)\n- [bufferutil](https://www.npmjs.com/package/bufferutil) for a much faster WebSocket connection when *not* using uws (`npm install bufferutil`)\n\n## Example usage\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.tag}!`);\n});\n\nclient.on('message', msg => {\n  if (msg.content === 'ping') {\n    msg.reply('pong');\n  }\n});\n\nclient.login('token');\n```\n\n## Links\n* [Website](https://discord.js.org/) ([source](https://github.com/discordjs/website))\n* [Documentation](https://discord.js.org/#/docs)\n* [Guide](https://discordjs.guide/) ([source](https://github.com/discordjs/guide))\n* [Discord.js Discord server](https://discord.gg/bRCvFy9)\n* [Discord API Discord server](https://discord.gg/discord-api)\n* [GitHub](https://github.com/discordjs/discord.js)\n* [NPM](https://www.npmjs.com/package/discord.js)\n* [Related libraries](https://discordapi.com/unofficial/libs.html)\n\n### Extensions\n* [RPC](https://www.npmjs.com/package/discord-rpc) ([source](https://github.com/discordjs/RPC))\n\n## Contributing\nBefore creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the\n[documentation](https://discord.js.org/#/docs).  \nSee [the contribution guide](https://github.com/discordjs/discord.js/blob/master/.github/CONTRIBUTING.md) if you'd like to submit a PR.\n\n## Help\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle\nnudge in the right direction, please don't hesitate to join our official [Discord.js Server](https://discord.gg/bRCvFy9).\n","path":"docs/general/welcome.md"},"updating":{"name":"Updating your code","type":"md","content":"# Version 11.1.0\nv11.1.0 features improved voice and gateway stability, as well as support for new features such as audit logs and searching for messages.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.1.0) for a full list of changes, including\ninformation about deprecations.\n\n# Version 11\nVersion 11 contains loads of new and improved features, optimisations, and bug fixes.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.0.0) for a full list of changes.\n\n## Significant additions\n* Message Reactions and Embeds (rich text)\n* Support for uws and erlpack for better performance\n* OAuthApplication support\n* Web distributions\n\n## Breaking changes\n### Client.login() no longer supports logging in with email + password\nLogging in with an email and password has always been heavily discouraged since the advent of proper token support, but in v11 we have made the decision to completely remove the functionality, since Hammer & Chisel have [officially stated](https://github.com/hammerandchisel/discord-api-docs/issues/69#issuecomment-223886862) it simply shouldn't be done.\n\nUser accounts can still log in with tokens just like bot accounts. To obtain the token for a user account, you can log in to Discord with that account, and use Ctrl + Shift + I to open the developer tools. In the console tab, evaluating `localStorage.token` will give you the token for that account.\n\n### ClientUser.setEmail()/setPassword() now require the current password, as well as setUsername() on user accounts\nSince you can no longer log in with email and password, you must provide the current account password to the `setEmail()`, `setPassword()`, and `setUsername()` methods for user accounts (self-bots).\n\n### Removed TextBasedChannel.sendTTSMessage()\nThis method was deemed to be an entirely pointless shortcut that virtually nobody even used.\nThe same results can be achieved by passing options to `send()` or `sendMessage()`.\n\nExample:\n```js\nchannel.send('Hi there', { tts: true });\n```\n\n### Using Collection.find()/exists() with IDs will throw an error\nThis is simply to help prevent a common mistake that is made frequently.\nTo find something or check its existence using an ID, you should use `.get()` and `.has()` which are part of the [ES6 Map class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map), which Collection is an extension of.\n\n# Version 10\nVersion 10's non-BC changes focus on cleaning up some inconsistencies that exist in previous versions.\nUpgrading from v9 should be quick and painless.\n\n## Client options\nAll client options have been converted to camelCase rather than snake_case, and `max_message_cache` was renamed to `messageCacheMaxSize`.\n\nv9 code example:\n```js\nconst client = new Discord.Client({\n  disable_everyone: true,\n  max_message_cache: 500,\n  message_cache_lifetime: 120,\n  message_sweep_interval: 60\n});\n```\n\nv10 code example:\n```js\nconst client = new Discord.Client({\n  disableEveryone: true,\n  messageCacheMaxSize: 500,\n  messageCacheLifetime: 120,\n  messageSweepInterval: 60\n});\n```\n\n## Presences\nPresences have been completely restructured.\nPrevious versions of discord.js assumed that users had the same presence amongst all guilds - with the introduction of sharding, however, this is no longer the case.\n\nv9 discord.js code may look something like this:\n```js\nUser.status; // the status of the user\nUser.game; // the game that the user is playing\nClientUser.setStatus(status, game, url); // set the new status for the user\n```\n\nv10 moves presences to GuildMember instances. For the sake of simplicity, though, User classes also expose presences.\nWhen accessing a presence on a User object, it simply finds the first GuildMember for the user, and uses its presence.\nAdditionally, the introduction of the Presence class keeps all of the presence data organised.\n\n**It is strongly recommended that you use a GuildMember's presence where available, rather than a User.\nA user may have an entirely different presence between two different guilds.**\n\nv10 code:\n```js\nMemberOrUser.presence.status; // the status of the member or user\nMemberOrUser.presence.game; // the game that the member or user is playing\nClientUser.setStatus(status); // online, idle, dnd, offline\nClientUser.setGame(game, streamingURL); // a game\nClientUser.setPresence(fullPresence); // status and game combined\n```\n\n## Voice\nVoice has been rewritten internally, but in a backwards-compatible manner.\nThere is only one breaking change here; the `disconnected` event was renamed to `disconnect`.\nSeveral more events have been made available to a VoiceConnection, so see the documentation.\n\n## Events\nMany events have been renamed or had their arguments change.\n\n### Client events\n|    Version   9                                       |    Version   10                               |\n|------------------------------------------------------|-----------------------------------------------|\n|    guildMemberAdd(guild, member)                     |    guildMemberAdd(member)                     |\n|    guildMemberAvailable(guild, member)               |    guildMemberAvailable(member)               |\n|    guildMemberRemove(guild, member)                  |    guildMemberRemove(member)                  |\n|    guildMembersChunk(guild, members)                 |    guildMembersChunk(members)                 |\n|    guildMemberUpdate(guild, oldMember, newMember)    |    guildMemberUpdate(oldMember, newMember)    |\n|    guildRoleCreate(guild, role)                      |    roleCreate(role)                           |\n|    guildRoleDelete(guild, role)                      |    roleDelete(role)                           |\n|    guildRoleUpdate(guild, oldRole, newRole)          |    roleUpdate(oldRole, newRole)               |\n\nThe guild parameter that has been dropped from the guild-related events can still be derived using `member.guild` or `role.guild`.\n\n### VoiceConnection events\n| Version 9    | Version 10 |\n|--------------|------------|\n| disconnected | disconnect |\n\n## Dates and timestamps\nAll dates/timestamps on the structures have been refactored to have a consistent naming scheme and availability.\nAll of them are named similarly to this:  \n**Date:** `Message.createdAt`  \n**Timestamp:** `Message.createdTimestamp`  \nSee the docs for each structure to see which date/timestamps are available on them.\n\n\n# Version 9\nThe version 9 (v9) rewrite takes a much more object-oriented approach than previous versions,\nwhich allows your code to be much more readable and manageable.\nIt's been rebuilt from the ground up and should be much more stable, fixing caching issues that affected\nolder versions. It also has support for newer Discord Features, such as emojis.\n\nVersion 9, while containing a sizable number of breaking changes, does not require much change in your code's logic -\nmost of the concepts are still the same, but loads of functions have been moved around.\nThe vast majority of methods you're used to using have been moved out of the Client class,\ninto other more relevant classes where they belong.\nBecause of this, you will need to convert most of your calls over to the new methods.\n\nHere are a few examples of methods that have changed:\n* `Client.sendMessage(channel, message)` ==> `TextChannel.sendMessage(message)`\n  * `Client.sendMessage(user, message)` ==> `User.sendMessage(message)`\n* `Client.updateMessage(message, \"New content\")` ==> `Message.edit(\"New Content\")`\n* `Client.getChannelLogs(channel, limit)` ==> `TextChannel.fetchMessages({options})`\n* `Server.detailsOfUser(User)` ==> `Server.members.get(User).properties` (retrieving a member gives a GuildMember object)\n* `Client.joinVoiceChannel(voicechannel)` => `VoiceChannel.join()`\n\nA couple more important details:\n* `Client.loginWithToken(\"token\")` ==> `client.login(\"token\")`\n* `Client.servers.length` ==> `client.guilds.size` (all instances of `server` are now `guild`)\n\n## No more callbacks!\nVersion 9 eschews callbacks in favour of Promises. This means all code relying on callbacks must be changed.  \nFor example, the following code:\n\n```js\nclient.getChannelLogs(channel, 100, function(messages) {\n  console.log(`${messages.length} messages found`);\n});\n```\n\n```js\nchannel.fetchMessages({limit: 100}).then(messages => {\n  console.log(`${messages.size} messages found`);\n});\n```\n","path":"docs/general/updating.md"},"faq":{"name":"FAQ","type":"md","content":"# Frequently Asked Questions\nThese are just questions that get asked frequently, that usually have a common resolution.\nIf you have issues not listed here, please ask in the [official Discord server](https://discord.gg/bRCvFy9).\nAlways make sure to read the documentation.\n\n## No matter what, I get `SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode`‽\nUpdate to Node.js 8.0.0 or newer.\n\n## How do I get voice working?\n- Install FFMPEG.\n- Install either the `node-opus` package or the `opusscript` package.\n  node-opus is greatly preferred, due to it having significantly better performance.\n\n## How do I install FFMPEG?\n- **npm:** `npm install ffmpeg-binaries`\n- **Ubuntu 16.04:** `sudo apt install ffmpeg`\n- **Ubuntu 14.04:** `sudo apt-get install libav-tools`\n- **Windows:** `npm install ffmpeg-binaries` or see the [FFMPEG section of AoDude's guide](https://github.com/bdistin/OhGodMusicBot/blob/master/README.md#download-ffmpeg).\n\n## How do I set up node-opus?\n- **Ubuntu:** Simply run `npm install node-opus`, and it's done. Congrats!\n- **Windows:** Run `npm install --global --production windows-build-tools` in an admin command prompt or PowerShell.\n  Then, running `npm install node-opus` in your bot's directory should successfully build it. Woo!\n","path":"docs/general/faq.md"}}},"topics":{"name":"Topics","files":{"voice":{"name":"Voice","type":"md","content":"# Introduction to Voice\nVoice in discord.js can be used for many things, such as music bots, recording or relaying audio.\n\nIn discord.js, you can use voice by connecting to a `VoiceChannel` to obtain a `VoiceConnection`, where you can start streaming and receiving audio.\n\nTo get started, make sure you have:\n* FFmpeg - `npm install ffmpeg-binaries`\n* an opus encoder, choose one from below:\n  * `npm install node-opus` (better performance)\n  * `npm install opusscript`\n* a good network connection\n\nThe preferred opus engine is node-opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose node-opus.\nUsing opusscript is only recommended for development environments where node-opus is tough to get working.\nFor production bots, using node-opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n## Joining a voice channel\nThe example below reacts to a message and joins the sender's voice channel, catching any errors. This is important\nas it allows us to obtain a `VoiceConnection` that we can start to stream audio with.\n\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\nclient.login('token here');\n\nclient.on('message', async message => {\n  // Voice only works in guilds, if the message does not come from a guild,\n  // we ignore it\n  if (!message.guild) return;\n\n  if (message.content === '/join') {\n    // Only try to join the sender's voice channel if they are in one themselves\n    if (message.member.voice.channel) {\n      const connection = await message.member.voice.channel.join();\n    } else {\n      message.reply('You need to join a voice channel first!');\n    }\n  }\n});\n```\n\n## Streaming to a Voice Channel\nIn the previous example, we looked at how to join a voice channel in order to obtain a `VoiceConnection`. Now that we\nhave obtained a voice connection, we can start streaming audio to it.\n\n### Introduction to playing on voice connections\nThe most basic example of playing audio over a connection would be playing a local file:\n\n```js\nconst dispatcher = connection.play('/home/discord/audio.mp3');\n```\n\nThe `dispatcher` in this case is a `StreamDispatcher` - here you can control the volume and playback of the stream:\n\n```js\ndispatcher.pause();\ndispatcher.resume();\n\ndispatcher.setVolume(0.5); // half the volume\n\ndispatcher.on('finish', () => {\n  console.log('Finished playing!');\n});\n\ndispatcher.destroy(); // end the stream\n```\n\nWe can also pass in options when we first play the stream:\n\n```js\nconst dispatcher = connection.play('/home/discord/audio.mp3', {\n  volume: 0.5,\n  passes: 3\n});\n```\n\nThese are just a subset of the options available (consult documentation for a full list). Most users may be interested in the `passes` option, however. As audio is sent over UDP, there is a chance packets may not arrive. Increasing the number of passes, e.g. to `3` gives you a better chance that your packets reach your recipients, at the cost of triple the bandwidth. We recommend not going over 5 passes.\n\n### What can I play?\n\nDiscord.js allows you to play a lot of things:\n\n```js\n// ReadableStreams, in this example YouTube audio\nconst ytdl = require('ytdl-core');\nconnection.play(ytdl(\n  'https://www.youtube.com/watch?v=ZlAU_w7-Xp8',\n  { filter: 'audioonly' }));\n\n// Files on the internet\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');\n\n// Local files\nconnection.play('/home/discord/audio.mp3');\n```\n\nNew to v12 is the ability to play OggOpus and WebmOpus streams with much better performance by skipping out Ffmpeg. Note this comes at the cost of no longer having volume control over the stream:\n\n```js\nconnection.play(fs.createReadStream('./media.webm'), {\n  type: 'webm/opus'\n});\n\nconnection.play(fs.createReadStream('./media.ogg'), {\n  type: 'ogg/opus'\n});\n```\n\nMake sure to consult the documentation for a full list of what you can play - there's too much to cover here!\n\n## Voice Broadcasts\n\nA voice broadcast is very useful for \"radio\" bots, that play the same audio across multiple channels. It means audio is only transcoded once, and is much better on performance.\n\n```js\nconst broadcast = client.createVoiceBroadcast();\n\nbroadcast.on('subscribe', dispatcher => {\n  console.log('New broadcast subscriber!');\n});\n\nbroadcast.on('unsubscribe', dispatcher => {\n  console.log('Channel unsubscribed from broadcast :(');\n})\n```\n\n`broadcast` is an instance of `VoiceBroadcast`, which has the same `play` method you are used to with regular VoiceConnections:\n\n```js\nconst dispatcher = broadcast.play('./audio.mp3');\n\nconnection.play(broadcast);\n```\n\nIt's important to note that the `dispatcher` stored above is a `BroadcastDispatcher` - it controls all the dispatcher subscribed to the broadcast, e.g. setting the volume of this dispatcher affects the volume of all subscribers.\n\n## Voice Receive\ncoming soon&trade;\n","path":"docs/topics/voice.md"},"web":{"name":"Web builds","type":"md","content":"# Web builds\nIn addition to your usual Node applications, discord.js has special distributions available that are capable of running in web browsers.\nThis is useful for client-side web apps that need to interact with the Discord API.\n[Webpack 3](https://webpack.js.org/) is used to build these.\n\n## Restrictions\n- Any voice-related functionality is unavailable, as there is currently no audio encoding/decoding capabilities without external native libraries,\n  which web browsers do not support.\n- The ShardingManager cannot be used, since it relies on being able to spawn child processes for shards.\n- None of the native optional packages are usable.\n\n### Require Library\nIf you are making your own webpack project, you can require `discord.js/browser` wherever you need to use discord.js, like so:\n```js\nconst Discord = require('discord.js/browser');\n// do something with Discord like you normally would\n```\n\n### Webpack File\nYou can obtain your desired version of discord.js' web build from the [webpack branch](https://github.com/discordjs/discord.js/tree/webpack) of the GitHub repository.\nThere is a file for each branch and version of the library, and the ones ending in `.min.js` are minified to substantially reduce the size of the source code.\n\nInclude the file on the page just as you would any other JS library, like so:\n```html\n<script type=\"text/javascript\" src=\"discord.VERSION.min.js\"></script>\n```\n\nRather than importing discord.js with `require('discord.js')`, the entire `Discord` object is available as a global (on the `window`) object.\nThe usage of the API isn't any different from using it in Node.js.\n\n#### Example\n```html\n<script type=\"text/javascript\" src=\"discord.11.1.0.min.js\"></script>\n<script type=\"text/javascript\">\n  const client = new Discord.Client();\n\n  client.on('message', msg => {\n    const guildTag = msg.channel.type === 'text' ? `[${msg.guild.name}]` : '[DM]';\n    const channelTag = msg.channel.type === 'text' ? `[#${msg.channel.name}]` : '';\n    console.log(`${guildTag}${channelTag} ${msg.author.tag}: ${msg.content}`);\n  });\n\n  client.login('some crazy token');\n</script>\n```\n","path":"docs/topics/web.md"}}},"examples":{"name":"Examples","files":{"ping":{"name":"Ping","type":"js","content":"/**\n * A ping pong bot, whenever you send \"ping\", it replies \"pong\".\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"ping\"\n  if (message.content === 'ping') {\n    // Send \"pong\" to the same channel\n    message.channel.send('pong');\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/ping.js"},"avatars":{"name":"Avatars","type":"js","content":"/**\n * Send a user a link to their avatar\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"what is my avatar\"\n  if (message.content === 'what is my avatar') {\n    // Send the user's avatar URL\n    message.reply(message.author.displayAvatarURL());\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/avatars.js"},"attachments":{"name":"Attachments","type":"md","content":"# Sending Attachments\n\nIn here you'll see a few examples showing how you can send an attachment using discord.js.\n\n## Sending an attachment using a URL\n\nThere are a few ways you can do this, but we'll show you the easiest.\n\nThe following examples use [MessageAttachment](/#/docs/main/master/class/MessageAttachment).\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using MessageAttachment\n\t\tconst attachment = new MessageAttachment('https://i.imgur.com/w3duR07.png');\n\t\t// Send the attachment in the message channel\n\t\tmessage.channel.send(attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd here is the result:\n\n![Image showing the result](/static/attachment-example1.png)\n\nBut what if you want to send an attachment with a message content? Fear not, for it is easy to do that too! We'll recommend reading [the TextChannel's \"send\" function documentation](/#/docs/main/master/class/TextChannel?scrollTo=send) to see what other options are available.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using MessageAttachment\n\t\tconst attachment = new MessageAttachment('https://i.imgur.com/w3duR07.png');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author},`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd here's the result of this one:\n\n![Image showing the result](/static/attachment-example2.png)\n\n## Sending a local file or buffer\n\nSending a local file isn't hard either! We'll be using [MessageAttachment](/#/docs/main/master/class/MessageAttachment) for these examples too.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using MessageAttachment\n\t\tconst attachment = new MessageAttachment('./rip.png');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author},`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nThe results are the same as the URL examples:\n\n![Image showing result](/static/attachment-example1.png)\n\nBut what if you have a buffer from an image? Or a text document? Well, it's the same as sending a local file or a URL!\n\nIn the following example, we'll be getting the buffer from a `memes.txt` file, and send it in the message channel.\nYou can use any buffer you want, and send it. Just make sure to overwrite the filename if it isn't an image!\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Import the native fs module\nconst fs = require('fs');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!memes'\n\tif (message.content === '!memes') {\n\t\t// Get the buffer from the 'memes.txt', assuming that the file exists\n\t\tconst buffer = fs.readFileSync('./memes.txt');\n\n\t\t/**\n\t\t * Create the attachment using MessageAttachment,\n\t\t * overwritting the default file name to 'memes.txt'\n\t\t * Read more about it over at\n\t\t * http://discord.js.org/#/docs/main/master/class/MessageAttachment\n\t\t */\n\t\tconst attachment = new MessageAttachment(buffer, 'memes.txt');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author}, here are your memes!`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd of course, the results are:\n\n![Attachment File example 3](/static/attachment-example3.png)\n","path":"docs/examples/attachments.md"},"greeting":{"name":"Server greeting","type":"js","content":"/**\n * A bot that welcomes new guild members when they join\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for new guild members\nclient.on('guildMemberAdd', member => {\n  // Send the message to a designated channel on a server:\n  const channel = member.guild.channels.find(ch => ch.name === 'member-log');\n  // Do nothing if the channel wasn't found on this server\n  if (!channel) return;\n  // Send the message, mentioning the member\n  channel.send(`Welcome to the server, ${member}`);\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/greeting.js"},"embed":{"name":"Message Embed","type":"js","content":"/**\n * An example of how you can send embeds\n */\n\n// Extract the required classes from the discord.js module\nconst { Client, MessageEmbed } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is \"how to embed\"\n  if (message.content === 'how to embed') {\n    // We can create embeds using the MessageEmbed constructor\n    // Read more about all that you can do with the constructor\n    // over at https://discord.js.org/#/docs/main/master/class/MessageEmbed\n    const embed = new MessageEmbed()\n      // Set the title of the field\n      .setTitle('A slick little embed')\n      // Set the color of the embed\n      .setColor(0xFF0000)\n      // Set the main content of the embed\n      .setDescription('Hello, this is a slick embed!');\n    // Send the embed to the same channel as the message\n    message.channel.send(embed);\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/embed.js"},"moderation":{"name":"Moderation","type":"md","content":"# Moderation\n\nIn here, you'll see some basic examples for kicking and banning a member.\n\n## Kicking a member\n\nLet's say you have a member that you'd like to kick. Here is an example of how you *can* do it.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // If the message content starts with \"!kick\"\n  if (message.content.startsWith('!kick')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/master/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Kick the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         */\n        member.kick('Optional reason that will display in the audit logs').then(() => {\n          // We let the message author know we were able to kick the person\n          message.reply(`Successfully kicked ${user.tag}`);\n        }).catch(err => {\n          // An error happened\n          // This is generally due to the bot not being able to kick the member,\n          // either due to missing permissions or role hierarchy\n          message.reply('I was unable to kick the member');\n          // Log the error\n          console.error(err);\n        });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply('That user isn\\'t in this guild!');\n      }\n    // Otherwise, if no user was mentioned\n    } else {\n      message.reply('You didn\\'t mention the user to kick!');\n    }\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/kick-example.png)\n\n## Banning a member\n\nBanning works the same way as kicking, but it has slightly more options that can be changed.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // if the message content starts with \"!ban\"\n  if (message.content.startsWith('!ban')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/master/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Ban the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         * Read more about what ban options there are over at\n         * https://discord.js.org/#/docs/main/master/class/GuildMember?scrollTo=ban\n         */\n        member.ban({\n          reason: 'They were bad!',\n        }).then(() => {\n          // We let the message author know we were able to ban the person\n          message.reply(`Successfully banned ${user.tag}`);\n        }).catch(err => {\n          // An error happened\n          // This is generally due to the bot not being able to ban the member,\n          // either due to missing permissions or role hierarchy\n          message.reply('I was unable to ban the member');\n          // Log the error\n          console.error(err);\n        });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply('That user isn\\'t in this guild!');\n      }\n    } else {\n    // Otherwise, if no user was mentioned\n      message.reply('You didn\\'t mention the user to ban!');\n    }\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/ban-example.png)\n","path":"docs/examples/moderation.md"},"webhook":{"name":"Webhook","type":"js","content":"/**\n * Send a message using a webhook\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create a new webhook\nconst hook = new Discord.WebhookClient('webhook id', 'webhook token');\n\n// Send a message using the webhook\nhook.send('I am now alive!');\n","path":"docs/examples/webhook.js"}}}},"classes":[{"name":"Category","extends":["Collection"],"meta":{"line":5,"file":"CommandHandler.js","path":"src/Core/Handlers"}},{"name":"LavalinkNode","description":"Lavalink Websocket","extends":["EventEmitter"],"construct":{"name":"LavalinkNode","description":"LavaLink options","params":[{"name":"manager","description":"The PlayerManager that created the Node","type":[[["PlayerManager"]]]},{"name":"options","description":"LavaLink options","type":[[["LavalinkNodeOptions"]]]}]},"props":[{"name":"region","description":"Region","nullable":true,"type":[[["string"]]],"meta":{"line":63,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"ready","description":"If the lavalink websocket is ready or not","type":[[["boolean"]]],"meta":{"line":74,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"ws","description":"The WebSocket","nullable":true,"type":[[["WebSocket"]]],"meta":{"line":79,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"reconnect","description":"Roconnection interval","nullable":true,"type":[[["NodeJSTimer"]]],"meta":{"line":84,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"reconnectInterval","description":"The interval to use for auto Reconnecting","type":[[["number"]]],"meta":{"line":89,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"stats","description":"Player stats","type":[[["Object"]]],"meta":{"line":94,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}}],"methods":[{"name":"connect","description":"Connects to the WebSocket server","meta":{"line":102,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"_ready","description":"Function for the onOpen WS event","access":"private","meta":{"line":121,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"send","description":"Sends data to the Lavalink Node","params":[{"name":"data","description":"Object to send","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":135,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"destroy","description":"Destroys the WebSocket","returns":[[["boolean"]]],"meta":{"line":152,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"_reconnect","description":"Reconnects the websocket","access":"private","meta":{"line":163,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"_close","description":"Function for the onClose event","access":"private","params":[{"name":"code","description":"WebSocket closing code (idk tbh)","type":[[["number"]]]},{"name":"reason","description":"reason","nullable":true,"type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":182,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"_message","description":"Function for the onMessage event","access":"private","params":[{"name":"msg","description":"Message object","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":200,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"_error","description":"Function for onError event","access":"private","params":[{"name":"error","description":"error from WS","type":[[["Error"]]]}],"meta":{"line":220,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}}],"events":[{"name":"ready","description":"Emmited when the node gets ready","meta":{"line":123,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"reconnecting","description":"Emmited when the node is attempting a reconnect","meta":{"line":166,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"disconnect","description":"Emmited when the node disconnects from the WebSocket and won't attempt to reconnect","params":[{"name":"reason","description":"The reason for the disconnect","type":[[["string"]]]}],"meta":{"line":186,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"message","description":"Emmited when a message is received and parsed","params":[{"name":"data","description":"The raw message data","type":[[["Object"]]]}],"meta":{"line":204,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"error","description":"Emitted whenever the Node's WebSocket encounters a connection error.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":221,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}}],"meta":{"line":8,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"Player","description":"LavaLink Player","extends":["EventEmitter"],"construct":{"name":"Player","description":"LavaLink Player Options","params":[{"name":"options","description":"Player Options","type":[[["PlayerOptions"]]]}]},"props":[{"name":"id","description":"Player id (Guild ID)","type":[[["string"]]],"meta":{"line":28,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"channel","description":"The current channel id","type":[[["string"]]],"meta":{"line":48,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"playing","description":"Playing boolean","type":[[["boolean"]]],"meta":{"line":53,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"paused","description":"Whether the Player is paused or not.","type":[[["boolean"]]],"meta":{"line":58,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"state","description":"LavaLink Player state","type":[[["Object"]]],"meta":{"line":63,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"track","description":"The current track that the Player is playing","nullable":true,"type":[[["string"]]],"meta":{"line":68,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"timestamp","description":"The timestamp the Player started playing","type":[[["number"]]],"meta":{"line":73,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}}],"methods":[{"name":"connect","description":"Sends a packet to Lavalink for voiceUpdate","params":[{"name":"data","description":"voiceUpdate event data","type":[[["Object"]]]}],"returns":[[["Player"]]],"meta":{"line":81,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"disconnect","description":"Disconnects the player","params":[{"name":"msg","description":"Disconnect reason","type":[[["string"]]]}],"returns":[[["Player"]]],"meta":{"line":96,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"play","description":"Plays a song","params":[{"name":"track","description":"A Base64 string from LavaLink API","type":[[["string"]]]},{"name":"options","description":"Other options","optional":true,"type":[[["Object"]]]},{"name":"options.startTime","description":"Start time","optional":true,"type":[[["number"]]]},{"name":"options.endTime","description":"End time","optional":true,"type":[[["number"]]]}],"returns":[[["Player"]]],"meta":{"line":116,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"stop","description":"stops the Player","returns":[[["Player"]]],"meta":{"line":132,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"pause","description":"Pauses or Resumes the player","params":[{"name":"pause","description":"Whether to resume or pause the player","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Player"]]],"meta":{"line":147,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"volume","description":"Sets the volume for the player","params":[{"name":"volume","description":"Volume","type":[[["number"]]]}],"returns":[[["Player"]]],"meta":{"line":166,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"seek","description":"Seeks to a specified position","params":[{"name":"position","description":"The position to seek to","type":[[["number"]]]}],"returns":[[["Player"]]],"meta":{"line":181,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"destroy","description":"Destroys the Player","returns":[[["Player"]]],"meta":{"line":194,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"switchChannel","description":"Switch player channel","params":[{"name":"channel","description":"Channel id","type":[[["string"]]]},{"name":"reactive","description":"Whether to switch channel","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":217,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"event","access":"private","params":[{"name":"message","description":"a packet","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":229,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"updateVoiceState","description":"Updates the Client's voice state","access":"private","params":[{"name":"channel","description":"Channel id","type":[[["string"]]]},{"name":"options","description":"selfmute and selfdeaf options","optional":true,"type":[[["Object"]]]},{"name":"options.selfmute","description":"selfmute option","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.selfdeaf","description":"selfdeaf option","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":268,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}}],"events":[{"name":"end","description":"Emitted whenever the Player gets Stuck or ends","params":[{"name":"message","description":"Data containg reason","type":[[["string"]]]}],"meta":{"line":249,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}}],"meta":{"line":7,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"PlayerManager","description":"Player Manager class","extends":["external:Collection"],"construct":{"name":"PlayerManager","description":"Constructs the PlayerManager","params":[{"name":"client","description":"Discord.js Client","type":[[["external",":"]]]},{"name":"nodes","description":"Array of Lavalink Nodes","type":[[["Array","<"],["Object",">"]]]},{"name":"options","description":"PlayerManager Options","type":[[["PlayerManagerOptions"]]]}]},"props":[{"name":"nodes","description":"Collection of LavaLink Nodes","type":[[["external",":"],["Collection","<"],["string",", "],["LavalinkNode",">"]]],"meta":{"line":38,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"user","description":"This client's id","type":[[["string"]]],"meta":{"line":43,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"shards","description":"Total number of shards your bot is operating on","type":[[["number"]]],"meta":{"line":48,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"Player","description":"The Player class","type":[[["Player"]]],"meta":{"line":53,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}}],"methods":[{"name":"createNode","description":"A function to create LavaLink nodes and set them to PlayerManager#nodes","params":[{"name":"options","description":"Node options","type":[[["Object"]]]}],"returns":[[["LavalinkNode"]]],"meta":{"line":67,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"removeNode","description":"Removes a node by host","params":[{"name":"host","description":"Node host","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":83,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"onMessage","description":"Used for the Node message event","access":"private","params":[{"name":"message","description":"Parsed message object","type":[[["Object"]]]}],"returns":[["*"]],"meta":{"line":96,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"join","description":"Joins the voice channel and spawns a new player","examples":["// Join voice channel\rPlayerManager.join({\r guild: \"412180910587379712\",\r channel: \"412180910587379716\",\r host: \"localhost\"\r});"],"params":[{"name":"data","description":"Object with guild, channel, host infomation","type":[[["Object"]]]},{"name":"data.guild","description":"Guild id","type":[[["string"]]]},{"name":"data.channel","description":"Channel id","type":[[["string"]]]},{"name":"data.host","description":"host","type":[[["string"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.selfmute","description":"Selfmute","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.selfdeaf","description":"Selfdeaf","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Player"]]],"meta":{"line":132,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"leave","description":"Leaves voice channel and deletes Player","examples":["// Leave the current channel\rPlayerManager.leave(\"412180910587379712\");"],"params":[{"name":"guild","description":"Guild id","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":159,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"voiceServerUpdate","description":"Used for the Voice Server Update event","access":"private","params":[{"name":"data","description":"Data","type":[[["Object"]]]}],"async":true,"returns":[[["void"]]],"meta":{"line":182,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"spawnPlayer","description":"Creates or returns a player","params":[{"name":"data","description":"Data for the player","type":[[["Object"]]]},{"name":"data.guild","description":"Player guild id","type":[[["string"]]]},{"name":"data.channel","description":"Player channel id","type":[[["string"]]]},{"name":"data.host","description":"Player host id","type":[[["string"]]]}],"returns":[[["Player"]]],"meta":{"line":202,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}}],"meta":{"line":9,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}}],"interfaces":[],"typedefs":[{"name":"LavalinkNodeOptions","type":[[["Object"]]],"props":[{"name":"host","description":"Lavalink host","type":[[["string"]]]},{"name":"port","description":"Lavalink port","optional":true,"default":80,"type":[[["number"]],[["string"]]]},{"name":"restPort","description":"Lavalink REST API Port","optional":true,"default":8080,"type":[[["number"]],[["string"]]]},{"name":"address","description":"Lavalink address","optional":true,"type":[[["string"]]]},{"name":"region","description":"Lavalink region","optional":true,"type":[[["string"]]]},{"name":"password","description":"Lavalink password","optional":true,"default":"\"youshallnotpass\"","type":[[["string"]]]},{"name":"reconnectInterval","description":"Reconnectinterval","optional":true,"default":5000,"type":[[["number"]]]}],"meta":{"line":10,"file":"LavalinkNode.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"PlayerOptions","type":[[["Object"]]],"props":[{"name":"id","description":"Client user id","type":[[["string"]]]},{"name":"client","description":"Client","type":[[["external",":"]]]},{"name":"manager","description":"The player's manager","type":[[["PlayerManager"]]]},{"name":"node","description":"Lavalink node for the Player","type":[[["LavalinkNode"]]]},{"name":"channel","description":"Channel id for the player","type":[[["string"]]]}],"meta":{"line":9,"file":"Player.js","path":"src/Core/Modules/MysticLava/lib"}},{"name":"PlayerManagerOptions","type":[[["Object"]]],"props":[{"name":"user","description":"Client user id","type":[[["string"]]]},{"name":"shards","description":"Total number of shards your bot is operating on","type":[[["number"]]]},{"name":"player","description":"Custom player class","optional":true,"type":[[["Player"]]]}],"meta":{"line":11,"file":"PlayerManager.js","path":"src/Core/Modules/MysticLava/lib"}}],"externals":[]}